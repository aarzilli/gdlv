package fontscan

// Code generated by textlayout/fontconfig/cmd/generate_family_subs DO NOT EDIT.

var familySubstitution = []substitution{
	// confs/30-0-google-crosextra-carlito-fontconfig.conf
	{
		test:               familyEquals("Calibri"),
		additionalFamilies: []string{"Carlito"},
		op:                 opAppend,
	},
	// confs/30-0-google-crosextra-carlito-fontconfig.conf
	{
		test:               familyEquals("Carlito"),
		additionalFamilies: []string{"Calibri"},
		op:                 opAppendLast,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("Batang"),
		additionalFamilies: []string{"Noto Serif CJK KR", "NanumMyeongjo", "UnBatang"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("바탕"),
		additionalFamilies: []string{"Noto Serif CJK KR", "NanumMyeongjo", "UnBatang"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("BatangChe"),
		additionalFamilies: []string{"Noto Serif CJK KR", "NanumMyeongjo", "UnBatang"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("바탕체"),
		additionalFamilies: []string{"Noto Serif CJK KR", "NanumMyeongjo", "UnBatang"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("Myeongjo"),
		additionalFamilies: []string{"Noto Serif CJK KR", "NanumMyeongjo", "UnBatang"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("명조"),
		additionalFamilies: []string{"Noto Serif CJK KR", "NanumMyeongjo", "UnBatang"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("MyeongjoChe"),
		additionalFamilies: []string{"Noto Serif CJK KR", "NanumMyeongjo", "UnBatang"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("명조체"),
		additionalFamilies: []string{"Noto Serif CJK KR", "NanumMyeongjo", "UnBatang"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("AR MingtiM KSC"),
		additionalFamilies: []string{"Noto Serif CJK KR", "NanumMyeongjo", "UnBatang"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("Adobe 명조 Std M"),
		additionalFamilies: []string{"Noto Serif CJK KR", "NanumMyeongjo", "UnBatang"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("Adobe Myeongjo Std M"),
		additionalFamilies: []string{"Noto Serif CJK KR", "NanumMyeongjo", "UnBatang"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("Gungsuh"),
		additionalFamilies: []string{"Noto Serif CJK KR", "UnGungseo", "NanumMyeongjo"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("궁서"),
		additionalFamilies: []string{"Noto Serif CJK KR", "UnGungseo", "NanumMyeongjo"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("GungsuhChe"),
		additionalFamilies: []string{"Noto Serif CJK KR", "UnGungseo", "NanumMyeongjo"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("궁서체"),
		additionalFamilies: []string{"Noto Serif CJK KR", "UnGungseo", "NanumMyeongjo"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("Dotum"),
		additionalFamilies: []string{"Noto Sans CJK KR", "NanumGothic", "UnDotum"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("돋움"),
		additionalFamilies: []string{"Noto Sans CJK KR", "NanumGothic", "UnDotum"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("Gothic"),
		additionalFamilies: []string{"Noto Sans CJK KR", "NanumGothic", "UnDotum"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("고딕"),
		additionalFamilies: []string{"Noto Sans CJK KR", "NanumGothic", "UnDotum"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("Malgun Gothic"),
		additionalFamilies: []string{"Noto Sans CJK KR", "NanumGothic", "UnDotum"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("맑은 고딕"),
		additionalFamilies: []string{"Noto Sans CJK KR", "NanumGothic", "UnDotum"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("Gulim"),
		additionalFamilies: []string{"Noto Sans CJK KR", "NanumGothic", "UnDotum"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("굴림"),
		additionalFamilies: []string{"Noto Sans CJK KR", "NanumGothic", "UnDotum"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("AppleGothic"),
		additionalFamilies: []string{"Noto Sans CJK KR", "NanumGothic", "UnDotum"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("애플고딕"),
		additionalFamilies: []string{"Noto Sans CJK KR", "NanumGothic", "UnDotum"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("DotumChe"),
		additionalFamilies: []string{"Noto Sans Mono CJK KR", "NanumGothicCoding", "NanumGothic"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("돋움체"),
		additionalFamilies: []string{"Noto Sans Mono CJK KR", "NanumGothicCoding", "NanumGothic"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("GothicChe"),
		additionalFamilies: []string{"Noto Sans Mono CJK KR", "NanumGothicCoding", "NanumGothic"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("고딕체"),
		additionalFamilies: []string{"Noto Sans Mono CJK KR", "NanumGothicCoding", "NanumGothic"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("GulimChe"),
		additionalFamilies: []string{"Noto Sans Mono CJK KR", "NanumGothicCoding", "NanumGothic"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("굴림체"),
		additionalFamilies: []string{"Noto Sans Mono CJK KR", "NanumGothicCoding", "NanumGothic"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("MS Gothic"),
		additionalFamilies: []string{"Noto Sans Mono CJK JP", "TakaoGothic", "IPAGothic", "IPAMonaGothic", "VL Gothic", "Sazanami Gothic", "Kochi Gothic"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("ＭＳ ゴシック"),
		additionalFamilies: []string{"Noto Sans Mono CJK JP", "TakaoGothic", "IPAGothic", "IPAMonaGothic", "VL Gothic", "Sazanami Gothic", "Kochi Gothic"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("MS PGothic"),
		additionalFamilies: []string{"Noto Sans CJK JP", "IPAMonaPGothic", "TakaoPGothic", "IPAPGothic", "VL PGothic", "Sazanami Gothic", "Kochi Gothic"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("ＭＳ Ｐゴシック"),
		additionalFamilies: []string{"Noto Sans CJK JP", "IPAMonaPGothic", "TakaoPGothic", "IPAPGothic", "VL PGothic", "Sazanami Gothic", "Kochi Gothic"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("MS UIGothic"),
		additionalFamilies: []string{"Noto Sans CJK JP", "IPAMonaPGothic", "TakaoPGothic", "IPAPGothic", "VL PGothic", "Sazanami Gothic", "Kochi Gothic"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("Meiryo UI"),
		additionalFamilies: []string{"Noto Sans CJK JP", "IPAMonaPGothic", "TakaoPGothic", "IPAPGothic", "VL PGothic", "Sazanami Gothic", "Kochi Gothic"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("MS Mincho"),
		additionalFamilies: []string{"Noto Serif CJK JP", "TakaoMincho", "IPAMincho", "IPAMonaMincho", "Sazanami Mincho", "Kochi Mincho"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("ＭＳ 明朝"),
		additionalFamilies: []string{"Noto Serif CJK JP", "TakaoMincho", "IPAMincho", "IPAMonaMincho", "Sazanami Mincho", "Kochi Mincho"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("AR MinchoL JIS"),
		additionalFamilies: []string{"Noto Serif CJK JP", "TakaoMincho", "IPAMincho", "IPAMonaMincho", "Sazanami Mincho", "Kochi Mincho"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("MS PMincho"),
		additionalFamilies: []string{"Noto Serif CJK JP", "IPAMonaPMincho", "TakaoPMincho", "IPAPMincho", "Sazanami Mincho", "Kochi Mincho"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("ＭＳ Ｐ明朝"),
		additionalFamilies: []string{"Noto Serif CJK JP", "IPAMonaPMincho", "TakaoPMincho", "IPAPMincho", "Sazanami Mincho", "Kochi Mincho"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("Meiryo"),
		additionalFamilies: []string{"IPAexGothic"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("メイリオ"),
		additionalFamilies: []string{"IPAexGothic"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("SimSun"),
		additionalFamilies: []string{"Noto Serif CJK SC", "HYSong", "AR PL UMing CN"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("NSimSun"),
		additionalFamilies: []string{"Noto Serif CJK SC", "HYSong", "AR PL UMing CN"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("SimSun-18030"),
		additionalFamilies: []string{"Noto Serif CJK SC", "HYSong", "AR PL UMing CN"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("NSimSun-18030"),
		additionalFamilies: []string{"Noto Serif CJK SC", "HYSong", "AR PL UMing CN"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("宋体"),
		additionalFamilies: []string{"Noto Serif CJK SC", "HYSong", "AR PL UMing CN"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("新宋体"),
		additionalFamilies: []string{"Noto Serif CJK SC", "HYSong", "AR PL UMing CN"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("AR MingtiM GB"),
		additionalFamilies: []string{"Noto Serif CJK SC", "HYSong", "AR PL UMing CN"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("KaiTi"),
		additionalFamilies: []string{"Noto Serif CJK SC", "AR PL UKai CN", "AR PL ZenKai Uni"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("楷体"),
		additionalFamilies: []string{"Noto Serif CJK SC", "AR PL UKai CN", "AR PL ZenKai Uni"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("Microsoft YaHei"),
		additionalFamilies: []string{"Noto Sans CJK SC", "WenQuanYi Micro Hei", "WenQuanYi Zen Hei"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("微软雅黑"),
		additionalFamilies: []string{"Noto Sans CJK SC", "WenQuanYi Micro Hei", "WenQuanYi Zen Hei"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("MingLiU"),
		additionalFamilies: []string{"Noto Serif CJK TC", "AR PL UMing TW"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("細明體"),
		additionalFamilies: []string{"Noto Serif CJK TC", "AR PL UMing TW"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("PMingLiU"),
		additionalFamilies: []string{"Noto Serif CJK TC", "AR PL UMing TW"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("新細明體"),
		additionalFamilies: []string{"Noto Serif CJK TC", "AR PL UMing TW"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("AR MingtiM BIG-5"),
		additionalFamilies: []string{"Noto Serif CJK TC", "AR PL UMing TW"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("DFKai\\-SB"),
		additionalFamilies: []string{"Noto Serif CJK TC", "AR PL UKai TW", "AR PL ZenKai Uni"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("標楷體"),
		additionalFamilies: []string{"Noto Serif CJK TC", "AR PL UKai TW", "AR PL ZenKai Uni"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("Microsoft JhengHei"),
		additionalFamilies: []string{"Noto Sans CJK TC", "WenQuanYi Micro Hei", "WenQuanYi Zen Hei"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("微軟正黑體"),
		additionalFamilies: []string{"Noto Sans CJK TC", "WenQuanYi Micro Hei", "WenQuanYi Zen Hei"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("Ming (for ISO10646)"),
		additionalFamilies: []string{"AR PL UMing HK"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("MingLiU_HKSCS"),
		additionalFamilies: []string{"AR PL UMing HK"},
		op:                 opAppend,
	},
	// confs/30-cjk-aliases.conf
	{
		test:               familyEquals("細明體_HKSCS"),
		additionalFamilies: []string{"AR PL UMing HK"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Nimbus Sans L"),
		additionalFamilies: []string{"Helvetica"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Nimbus Sans"),
		additionalFamilies: []string{"Helvetica"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("TeX Gyre Heros"),
		additionalFamilies: []string{"Helvetica"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Nimbus Sans Narrow"),
		additionalFamilies: []string{"Helvetica Narrow"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("TeX Gyre Heros Cn"),
		additionalFamilies: []string{"Helvetica Narrow"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Nimbus Roman No9 L"),
		additionalFamilies: []string{"Times"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Nimbus Roman"),
		additionalFamilies: []string{"Times"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("TeX Gyre Termes"),
		additionalFamilies: []string{"Times"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Nimbus Mono L"),
		additionalFamilies: []string{"Courier"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Nimbus Mono"),
		additionalFamilies: []string{"Courier"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Nimbus Mono PS"),
		additionalFamilies: []string{"Courier"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("TeX Gyre Cursor"),
		additionalFamilies: []string{"Courier"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Avant Garde"),
		additionalFamilies: []string{"ITC Avant Garde Gothic"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("URW Gothic L"),
		additionalFamilies: []string{"ITC Avant Garde Gothic"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("URW Gothic"),
		additionalFamilies: []string{"ITC Avant Garde Gothic"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("TeX Gyre Adventor"),
		additionalFamilies: []string{"ITC Avant Garde Gothic"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Bookman"),
		additionalFamilies: []string{"ITC Bookman"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("URW Bookman L"),
		additionalFamilies: []string{"ITC Bookman"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Bookman URW"),
		additionalFamilies: []string{"ITC Bookman"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("URW Bookman"),
		additionalFamilies: []string{"ITC Bookman"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("TeX Gyre Bonum"),
		additionalFamilies: []string{"ITC Bookman"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Bookman Old Style"),
		additionalFamilies: []string{"ITC Bookman"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Zapf Chancery"),
		additionalFamilies: []string{"ITC Zapf Chancery"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("URW Chancery L"),
		additionalFamilies: []string{"ITC Zapf Chancery"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Chancery URW"),
		additionalFamilies: []string{"ITC Zapf Chancery"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Z003"),
		additionalFamilies: []string{"ITC Zapf Chancery"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("TeX Gyre Chorus"),
		additionalFamilies: []string{"ITC Zapf Chancery"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("URW Palladio L"),
		additionalFamilies: []string{"Palatino"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Palladio URW"),
		additionalFamilies: []string{"Palatino"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("P052"),
		additionalFamilies: []string{"Palatino"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("TeX Gyre Pagella"),
		additionalFamilies: []string{"Palatino"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Palatino Linotype"),
		additionalFamilies: []string{"Palatino"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Century Schoolbook L"),
		additionalFamilies: []string{"New Century Schoolbook"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Century SchoolBook URW"),
		additionalFamilies: []string{"New Century Schoolbook"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("C059"),
		additionalFamilies: []string{"New Century Schoolbook"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("TeX Gyre Schola"),
		additionalFamilies: []string{"New Century Schoolbook"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Century Schoolbook"),
		additionalFamilies: []string{"New Century Schoolbook"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Arimo"),
		additionalFamilies: []string{"Arial"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Liberation Sans"),
		additionalFamilies: []string{"Arial"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Liberation Sans Narrow"),
		additionalFamilies: []string{"Arial Narrow"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Albany"),
		additionalFamilies: []string{"Arial"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Albany AMT"),
		additionalFamilies: []string{"Arial"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Tinos"),
		additionalFamilies: []string{"Times New Roman"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Liberation Serif"),
		additionalFamilies: []string{"Times New Roman"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Thorndale"),
		additionalFamilies: []string{"Times New Roman"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Thorndale AMT"),
		additionalFamilies: []string{"Times New Roman"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Cousine"),
		additionalFamilies: []string{"Courier New"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Liberation Mono"),
		additionalFamilies: []string{"Courier New"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Cumberland"),
		additionalFamilies: []string{"Courier New"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Cumberland AMT"),
		additionalFamilies: []string{"Courier New"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Gelasio"),
		additionalFamilies: []string{"Georgia"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Caladea"),
		additionalFamilies: []string{"Cambria"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Carlito"),
		additionalFamilies: []string{"Calibri"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("SymbolNeu"),
		additionalFamilies: []string{"Symbol"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Helvetica"),
		additionalFamilies: []string{"Arial"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Helvetica Narrow"),
		additionalFamilies: []string{"Arial Narrow"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Times"),
		additionalFamilies: []string{"Times New Roman"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Courier"),
		additionalFamilies: []string{"Courier New"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Arial"),
		additionalFamilies: []string{"Helvetica"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Arial Narrow"),
		additionalFamilies: []string{"Helvetica Narrow"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Times New Roman"),
		additionalFamilies: []string{"Times"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Courier New"),
		additionalFamilies: []string{"Courier"},
		op:                 opAppendLast,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Helvetica"),
		additionalFamilies: []string{"TeX Gyre Heros"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Helvetica Narrow"),
		additionalFamilies: []string{"TeX Gyre Heros Cn"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Times"),
		additionalFamilies: []string{"TeX Gyre Termes"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Courier"),
		additionalFamilies: []string{"TeX Gyre Cursor"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("ITC Avant Garde Gothic"),
		additionalFamilies: []string{"TeX Gyre Adventor"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("ITC Bookman"),
		additionalFamilies: []string{"Bookman Old Style", "TeX Gyre Bonum"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("ITC Zapf Chancery"),
		additionalFamilies: []string{"TeX Gyre Chorus"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Palatino"),
		additionalFamilies: []string{"Palatino Linotype", "TeX Gyre Pagella"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("New Century Schoolbook"),
		additionalFamilies: []string{"Century Schoolbook", "TeX Gyre Schola"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Arial"),
		additionalFamilies: []string{"Arimo", "Liberation Sans", "Albany", "Albany AMT"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Arial Narrow"),
		additionalFamilies: []string{"Liberation Sans Narrow"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Times New Roman"),
		additionalFamilies: []string{"Tinos", "Liberation Serif", "Thorndale", "Thorndale AMT"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Courier New"),
		additionalFamilies: []string{"Cousine", "Liberation Mono", "Cumberland", "Cumberland AMT"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Georgia"),
		additionalFamilies: []string{"Gelasio"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Cambria"),
		additionalFamilies: []string{"Caladea"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Calibri"),
		additionalFamilies: []string{"Carlito"},
		op:                 opAppend,
	},
	// confs/30-metric-aliases.conf (Set substitutions for similar/metric-compatible families)
	{
		test:               familyEquals("Symbol"),
		additionalFamilies: []string{"SymbolNeu"},
		op:                 opAppend,
	},
	// confs/30-opensymbol.conf
	{
		test:               familyEquals("Symbol"),
		additionalFamilies: []string{"OpenSymbol"},
		op:                 opAppend,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Nazli"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Lotoos"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Mitra"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Ferdosi"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Badr"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Zar"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Titr"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Jadid"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Kochi Mincho"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("AR PL SungtiL GB"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("AR PL Mingti2L Big5"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("ＭＳ 明朝"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("NanumMyeongjo"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("UnBatang"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Baekmuk Batang"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("MgOpen Canonica"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Sazanami Mincho"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("AR PL ZenKai Uni"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("ZYSong18030"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("FreeSerif"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("SimSun"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Arshia"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Elham"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Farnaz"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Nasim"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Sina"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Roya"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Koodak"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Terafik"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Kochi Gothic"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("AR PL KaitiM GB"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("AR PL KaitiM Big5"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("ＭＳ ゴシック"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("NanumGothic"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("UnDotum"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Baekmuk Dotum"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("MgOpen Moderna"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("MgOpen Modata"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("MgOpen Cosmetica"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Sazanami Gothic"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("AR PL ShanHeiSun Uni"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("ZYSong18030"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("FreeSans"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("NSimSun"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("ZYSong18030"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("NanumGothicCoding"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("FreeMono"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Homa"),
		additionalFamilies: []string{"fantasy"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Kamran"),
		additionalFamilies: []string{"fantasy"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Fantezi"),
		additionalFamilies: []string{"fantasy"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Tabassom"),
		additionalFamilies: []string{"fantasy"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("IranNastaliq"),
		additionalFamilies: []string{"cursive"},
		op:                 opAppendLast,
	},
	// confs/40-nonlatin.conf (Set substitutions for non-Latin fonts)
	{
		test:               familyEquals("Nafees Nastaleeq"),
		additionalFamilies: []string{"cursive"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("Noto Color Emoji"),
		additionalFamilies: []string{"emoji"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("Apple Color Emoji"),
		additionalFamilies: []string{"emoji"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("Segoe UI Emoji"),
		additionalFamilies: []string{"emoji"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("Twitter Color Emoji"),
		additionalFamilies: []string{"emoji"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("EmojiOne Mozilla"),
		additionalFamilies: []string{"emoji"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("Emoji Two"),
		additionalFamilies: []string{"emoji"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("Emoji One"),
		additionalFamilies: []string{"emoji"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("Noto Emoji"),
		additionalFamilies: []string{"emoji"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("Android Emoji"),
		additionalFamilies: []string{"emoji"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               langEqualsAndNoFamily{lang: "und-zsye", family: "emoji"},
		additionalFamilies: []string{"emoji"},
		op:                 opAppend,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("XITS Math"),
		additionalFamilies: []string{"math"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("STIX Two Math"),
		additionalFamilies: []string{"math"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("Cambria Math"),
		additionalFamilies: []string{"math"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("Latin Modern Math"),
		additionalFamilies: []string{"math"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("Minion Math"),
		additionalFamilies: []string{"math"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("Lucida Math"),
		additionalFamilies: []string{"math"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               familyEquals("Asana Math"),
		additionalFamilies: []string{"math"},
		op:                 opAppendLast,
	},
	// confs/45-generic.conf (Set substitutions for emoji/math fonts)
	{
		test:               langEqualsAndNoFamily{lang: "und-zmth", family: "math"},
		additionalFamilies: []string{"math"},
		op:                 opAppend,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Bitstream Vera Serif"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Cambria"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Constantia"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("DejaVu Serif"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Elephant"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Garamond"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Georgia"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Liberation Serif"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Luxi Serif"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("MS Serif"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Nimbus Roman No9 L"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Nimbus Roman"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Palatino Linotype"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Thorndale AMT"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Thorndale"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Times New Roman"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Times"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Albany AMT"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Albany"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Arial Unicode MS"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Arial"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Bitstream Vera Sans"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Britannic"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Calibri"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Candara"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Century Gothic"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Corbel"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("DejaVu Sans"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Helvetica"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Haettenschweiler"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Liberation Sans"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("MS Sans Serif"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Nimbus Sans L"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Nimbus Sans"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Luxi Sans"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Tahoma"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Trebuchet MS"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Twentieth Century"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Verdana"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Andale Mono"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Bitstream Vera Sans Mono"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Consolas"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Courier New"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Courier"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Cumberland AMT"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Cumberland"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("DejaVu Sans Mono"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Fixedsys"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Inconsolata"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Liberation Mono"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Luxi Mono"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Nimbus Mono L"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Nimbus Mono"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Nimbus Mono PS"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Terminal"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Bauhaus Std"),
		additionalFamilies: []string{"fantasy"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Cooper Std"),
		additionalFamilies: []string{"fantasy"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Copperplate Gothic Std"),
		additionalFamilies: []string{"fantasy"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Impact"),
		additionalFamilies: []string{"fantasy"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Comic Sans MS"),
		additionalFamilies: []string{"cursive"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("ITC Zapf Chancery Std"),
		additionalFamilies: []string{"cursive"},
		op:                 opAppendLast,
	},
	// confs/45-latin.conf (Set substitutions for Latin fonts)
	{
		test:               familyEquals("Zapfino"),
		additionalFamilies: []string{"cursive"},
		op:                 opAppendLast,
	},
	// confs/49-sansserif.conf (Add sans-serif to the family when no generic name)
	{
		test:               noGenericFamily{},
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/56-language-selector-ar.conf
	{
		test:               langAndFamilyEqual{lang: "ar", family: "sans-serif"},
		additionalFamilies: []string{"Noto Sans", "Noto Sans Arabic UI"},
		op:                 opPrepend,
	},
	// confs/56-language-selector-ar.conf
	{
		test:               langAndFamilyEqual{lang: "ar", family: "serif"},
		additionalFamilies: []string{"Noto Serif", "Noto Naskh Arabic"},
		op:                 opPrepend,
	},
	// confs/57-dejavu-sans-mono.conf
	{
		test:               familyEquals("Bepa Mono"),
		additionalFamilies: []string{"DejaVu Sans Mono"},
		op:                 opAppend,
	},
	// confs/57-dejavu-sans-mono.conf
	{
		test:               familyEquals("Bitstream Prima Sans Mono"),
		additionalFamilies: []string{"DejaVu Sans Mono"},
		op:                 opAppend,
	},
	// confs/57-dejavu-sans-mono.conf
	{
		test:               familyEquals("Bitstream Vera Sans Mono"),
		additionalFamilies: []string{"DejaVu Sans Mono"},
		op:                 opAppend,
	},
	// confs/57-dejavu-sans-mono.conf
	{
		test:               familyEquals("DejaVu LGC Sans Mono"),
		additionalFamilies: []string{"DejaVu Sans Mono"},
		op:                 opAppend,
	},
	// confs/57-dejavu-sans-mono.conf
	{
		test:               familyEquals("Olwen Sans Mono"),
		additionalFamilies: []string{"DejaVu Sans Mono"},
		op:                 opAppend,
	},
	// confs/57-dejavu-sans-mono.conf
	{
		test:               familyEquals("SUSE Sans Mono"),
		additionalFamilies: []string{"DejaVu Sans Mono"},
		op:                 opAppend,
	},
	// confs/57-dejavu-sans.conf
	{
		test:               familyEquals("Arev Sans"),
		additionalFamilies: []string{"DejaVu Sans"},
		op:                 opAppend,
	},
	// confs/57-dejavu-sans.conf
	{
		test:               familyEquals("Bepa"),
		additionalFamilies: []string{"DejaVu Sans"},
		op:                 opAppend,
	},
	// confs/57-dejavu-sans.conf
	{
		test:               familyEquals("Bitstream Prima Sans"),
		additionalFamilies: []string{"DejaVu Sans"},
		op:                 opAppend,
	},
	// confs/57-dejavu-sans.conf
	{
		test:               familyEquals("Bitstream Vera Sans"),
		additionalFamilies: []string{"DejaVu Sans"},
		op:                 opAppend,
	},
	// confs/57-dejavu-sans.conf
	{
		test:               familyEquals("DejaVu LGC Sans"),
		additionalFamilies: []string{"DejaVu Sans"},
		op:                 opAppend,
	},
	// confs/57-dejavu-sans.conf
	{
		test:               familyEquals("Hunky Sans"),
		additionalFamilies: []string{"DejaVu Sans"},
		op:                 opAppend,
	},
	// confs/57-dejavu-sans.conf
	{
		test:               familyEquals("Olwen Sans"),
		additionalFamilies: []string{"DejaVu Sans"},
		op:                 opAppend,
	},
	// confs/57-dejavu-sans.conf
	{
		test:               familyEquals("SUSE Sans"),
		additionalFamilies: []string{"DejaVu Sans"},
		op:                 opAppend,
	},
	// confs/57-dejavu-sans.conf
	{
		test:               familyEquals("Verajja"),
		additionalFamilies: []string{"DejaVu Sans"},
		op:                 opAppend,
	},
	// confs/57-dejavu-sans.conf
	{
		test:               familyEquals("VerajjaPDA"),
		additionalFamilies: []string{"DejaVu Sans"},
		op:                 opAppend,
	},
	// confs/57-dejavu-serif.conf
	{
		test:               familyEquals("Bitstream Prima Serif"),
		additionalFamilies: []string{"DejaVu Serif"},
		op:                 opAppend,
	},
	// confs/57-dejavu-serif.conf
	{
		test:               familyEquals("Bitstream Vera Serif"),
		additionalFamilies: []string{"DejaVu Serif"},
		op:                 opAppend,
	},
	// confs/57-dejavu-serif.conf
	{
		test:               familyEquals("DejaVu LGC Serif"),
		additionalFamilies: []string{"DejaVu Serif"},
		op:                 opAppend,
	},
	// confs/57-dejavu-serif.conf
	{
		test:               familyEquals("Hunky Serif"),
		additionalFamilies: []string{"DejaVu Serif"},
		op:                 opAppend,
	},
	// confs/57-dejavu-serif.conf
	{
		test:               familyEquals("Olwen Serif"),
		additionalFamilies: []string{"DejaVu Serif"},
		op:                 opAppend,
	},
	// confs/57-dejavu-serif.conf
	{
		test:               familyEquals("SUSE Serif"),
		additionalFamilies: []string{"DejaVu Serif"},
		op:                 opAppend,
	},
	// confs/57-dejavu-serif.conf
	{
		test:               familyEquals("Verajja Serif"),
		additionalFamilies: []string{"DejaVu Serif"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans-mono.conf
	{
		test:               familyEquals("Bepa Mono"),
		additionalFamilies: []string{"DejaVu LGC Sans Mono"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans-mono.conf
	{
		test:               familyEquals("Bitstream Prima Sans Mono"),
		additionalFamilies: []string{"DejaVu LGC Sans Mono"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans-mono.conf
	{
		test:               familyEquals("Bitstream Vera Sans Mono"),
		additionalFamilies: []string{"DejaVu LGC Sans Mono"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans-mono.conf
	{
		test:               familyEquals("DejaVu Sans Mono"),
		additionalFamilies: []string{"DejaVu LGC Sans Mono"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans-mono.conf
	{
		test:               familyEquals("Olwen Sans Mono"),
		additionalFamilies: []string{"DejaVu LGC Sans Mono"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans-mono.conf
	{
		test:               familyEquals("SUSE Sans Mono"),
		additionalFamilies: []string{"DejaVu LGC Sans Mono"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans-mono.conf
	{
		test:               familyEquals("DejaVu LGC Sans Mono"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/58-dejavu-lgc-sans-mono.conf
	{
		test:               familyEquals("monospace"),
		additionalFamilies: []string{"DejaVu LGC Sans Mono"},
		op:                 opPrepend,
	},
	// confs/58-dejavu-lgc-sans.conf
	{
		test:               familyEquals("Arev Sans"),
		additionalFamilies: []string{"DejaVu LGC Sans"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans.conf
	{
		test:               familyEquals("Bepa"),
		additionalFamilies: []string{"DejaVu LGC Sans"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans.conf
	{
		test:               familyEquals("Bitstream Prima Sans"),
		additionalFamilies: []string{"DejaVu LGC Sans"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans.conf
	{
		test:               familyEquals("Bitstream Vera Sans"),
		additionalFamilies: []string{"DejaVu LGC Sans"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans.conf
	{
		test:               familyEquals("DejaVu Sans"),
		additionalFamilies: []string{"DejaVu LGC Sans"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans.conf
	{
		test:               familyEquals("Hunky Sans"),
		additionalFamilies: []string{"DejaVu LGC Sans"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans.conf
	{
		test:               familyEquals("Olwen Sans"),
		additionalFamilies: []string{"DejaVu LGC Sans"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans.conf
	{
		test:               familyEquals("SUSE Sans"),
		additionalFamilies: []string{"DejaVu LGC Sans"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans.conf
	{
		test:               familyEquals("Verajja"),
		additionalFamilies: []string{"DejaVu LGC Sans"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans.conf
	{
		test:               familyEquals("VerajjaPDA"),
		additionalFamilies: []string{"DejaVu LGC Sans"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-sans.conf
	{
		test:               familyEquals("DejaVu LGC Sans"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/58-dejavu-lgc-sans.conf
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"DejaVu LGC Sans"},
		op:                 opPrepend,
	},
	// confs/58-dejavu-lgc-serif.conf
	{
		test:               familyEquals("Bitstream Prima Serif"),
		additionalFamilies: []string{"DejaVu LGC Serif"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-serif.conf
	{
		test:               familyEquals("Bitstream Vera Serif"),
		additionalFamilies: []string{"DejaVu LGC Serif"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-serif.conf
	{
		test:               familyEquals("DejaVu Serif"),
		additionalFamilies: []string{"DejaVu LGC Serif"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-serif.conf
	{
		test:               familyEquals("Hunky Serif"),
		additionalFamilies: []string{"DejaVu LGC Serif"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-serif.conf
	{
		test:               familyEquals("Olwen Serif"),
		additionalFamilies: []string{"DejaVu LGC Serif"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-serif.conf
	{
		test:               familyEquals("SUSE Serif"),
		additionalFamilies: []string{"DejaVu LGC Serif"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-serif.conf
	{
		test:               familyEquals("Verajja Serif"),
		additionalFamilies: []string{"DejaVu LGC Serif"},
		op:                 opAppend,
	},
	// confs/58-dejavu-lgc-serif.conf
	{
		test:               familyEquals("DejaVu LGC Serif"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/58-dejavu-lgc-serif.conf
	{
		test:               familyEquals("serif"),
		additionalFamilies: []string{"DejaVu LGC Serif"},
		op:                 opPrepend,
	},
	// confs/59-lohit-devanagari.conf
	{
		test:               familyEquals("mangal"),
		additionalFamilies: []string{"Lohit Devanagari"},
		op:                 opAppend,
	},
	// confs/59-lohit-devanagari.conf
	{
		test:               familyEquals("Lohit Devanagari"),
		additionalFamilies: []string{"managl"},
		op:                 opAppendLast,
	},
	// confs/60-generic.conf (Set preferable fonts for emoji/math fonts)
	{
		test:               familyEquals("emoji"),
		additionalFamilies: []string{"Noto Color Emoji", "Apple Color Emoji", "Segoe UI Emoji", "Twitter Color Emoji", "EmojiOne Mozilla", "Emoji Two", "Emoji One", "Noto Emoji", "Android Emoji"},
		op:                 opPrepend,
	},
	// confs/60-generic.conf (Set preferable fonts for emoji/math fonts)
	{
		test:               familyEquals("math"),
		additionalFamilies: []string{"XITS Math", "STIX Two Math", "Cambria Math", "Latin Modern Math", "Minion Math", "Lucida Math", "Asana Math"},
		op:                 opPrepend,
	},
	// confs/60-latin.conf (Set preferable fonts for Latin)
	{
		test:               familyEquals("serif"),
		additionalFamilies: []string{"DejaVu Serif", "Bitstream Vera Serif", "Times New Roman", "Thorndale AMT", "Luxi Serif", "Nimbus Roman No9 L", "Nimbus Roman", "Times"},
		op:                 opPrepend,
	},
	// confs/60-latin.conf (Set preferable fonts for Latin)
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"DejaVu Sans", "Bitstream Vera Sans", "Verdana", "Arial", "Albany AMT", "Luxi Sans", "Nimbus Sans L", "Nimbus Sans", "Helvetica", "Lucida Sans Unicode", "BPG Glaho International", "Tahoma"},
		op:                 opPrepend,
	},
	// confs/60-latin.conf (Set preferable fonts for Latin)
	{
		test:               familyEquals("monospace"),
		additionalFamilies: []string{"DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Inconsolata", "Andale Mono", "Courier New", "Cumberland AMT", "Luxi Mono", "Nimbus Mono L", "Nimbus Mono", "Nimbus Mono PS", "Courier"},
		op:                 opPrepend,
	},
	// confs/60-latin.conf (Set preferable fonts for Latin)
	{
		test:               familyEquals("fantasy"),
		additionalFamilies: []string{"Impact", "Copperplate Gothic Std", "Cooper Std", "Bauhaus Std"},
		op:                 opPrepend,
	},
	// confs/60-latin.conf (Set preferable fonts for Latin)
	{
		test:               familyEquals("cursive"),
		additionalFamilies: []string{"ITC Zapf Chancery Std", "Zapfino", "Comic Sans MS"},
		op:                 opPrepend,
	},
	// confs/61-urw-bookman.conf
	{
		test:               familyEquals("serif"),
		additionalFamilies: []string{"URW Bookman"},
		op:                 opPrepend,
	},
	// confs/61-urw-bookman.conf
	{
		test:               familyEquals("URW Bookman"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/61-urw-bookman.conf
	{
		test:               familyEquals("URW Bookman"),
		additionalFamilies: []string{"ITC Bookman"},
		op:                 opAppendLast,
	},
	// confs/61-urw-bookman.conf
	{
		test:               familyEquals("ITC Bookman"),
		additionalFamilies: []string{"URW Bookman"},
		op:                 opAppend,
	},
	// confs/61-urw-bookman.conf
	{
		test:               familyEquals("Bookman Old Style"),
		additionalFamilies: []string{"URW Bookman"},
		op:                 opAppend,
	},
	// confs/61-urw-bookman.conf
	{
		test:               familyEquals("TeX Gyre Bonum"),
		additionalFamilies: []string{"URW Bookman"},
		op:                 opAppend,
	},
	// confs/61-urw-c059.conf
	{
		test:               familyEquals("serif"),
		additionalFamilies: []string{"C059"},
		op:                 opPrepend,
	},
	// confs/61-urw-c059.conf
	{
		test:               familyEquals("C059"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/61-urw-c059.conf
	{
		test:               familyEquals("C059"),
		additionalFamilies: []string{"New Century Schoolbook"},
		op:                 opAppendLast,
	},
	// confs/61-urw-c059.conf
	{
		test:               familyEquals("New Century Schoolbook"),
		additionalFamilies: []string{"C059"},
		op:                 opAppend,
	},
	// confs/61-urw-c059.conf
	{
		test:               familyEquals("Century Schoolbook"),
		additionalFamilies: []string{"C059"},
		op:                 opAppend,
	},
	// confs/61-urw-c059.conf
	{
		test:               familyEquals("Tex Gyre Schola"),
		additionalFamilies: []string{"C059"},
		op:                 opAppend,
	},
	// confs/61-urw-d050000l.conf
	{
		test:               familyEquals("fantasy"),
		additionalFamilies: []string{"D050000L"},
		op:                 opPrepend,
	},
	// confs/61-urw-d050000l.conf
	{
		test:               familyEquals("D050000L"),
		additionalFamilies: []string{"fantasy"},
		op:                 opAppendLast,
	},
	// confs/61-urw-d050000l.conf
	{
		test:               familyEquals("D050000L"),
		additionalFamilies: []string{"ITC Zapf Dingbats"},
		op:                 opAppendLast,
	},
	// confs/61-urw-d050000l.conf
	{
		test:               familyEquals("ITC Zapf Dingbats"),
		additionalFamilies: []string{"D050000L"},
		op:                 opAppend,
	},
	// confs/61-urw-d050000l.conf
	{
		test:               familyEquals("ITC Zapf Dingbats Std"),
		additionalFamilies: []string{"D050000L"},
		op:                 opAppend,
	},
	// confs/61-urw-d050000l.conf
	{
		test:               familyEquals("Zapf Dingbats"),
		additionalFamilies: []string{"D050000L"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-backwards.conf
	{
		test:               familyEquals("Century Schoolbook L"),
		additionalFamilies: []string{"C059"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-backwards.conf
	{
		test:               familyEquals("Century SchoolBook URW"),
		additionalFamilies: []string{"C059"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-backwards.conf
	{
		test:               familyEquals("Dingbats"),
		additionalFamilies: []string{"D050000L"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-backwards.conf
	{
		test:               familyEquals("Nimbus Mono"),
		additionalFamilies: []string{"Nimbus Mono PS"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-backwards.conf
	{
		test:               familyEquals("Nimbus Mono L"),
		additionalFamilies: []string{"Nimbus Mono PS"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-backwards.conf
	{
		test:               familyEquals("Nimbus Roman No9 L"),
		additionalFamilies: []string{"Nimbus Roman"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-backwards.conf
	{
		test:               familyEquals("Nimbus Sans L"),
		additionalFamilies: []string{"Nimbus Sans"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-backwards.conf
	{
		test:               familyEquals("Palladio URW"),
		additionalFamilies: []string{"P052"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-backwards.conf
	{
		test:               familyEquals("URW Palladio L"),
		additionalFamilies: []string{"P052"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-backwards.conf
	{
		test:               familyEquals("Standard Symbols L"),
		additionalFamilies: []string{"Standard Symbols PS"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-backwards.conf
	{
		test:               familyEquals("Bookman URW"),
		additionalFamilies: []string{"URW Bookman"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-backwards.conf
	{
		test:               familyEquals("URW Bookman L"),
		additionalFamilies: []string{"URW Bookman"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-backwards.conf
	{
		test:               familyEquals("URW Gothic L"),
		additionalFamilies: []string{"URW Gothic"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-backwards.conf
	{
		test:               familyEquals("Chancery URW"),
		additionalFamilies: []string{"Z003"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-backwards.conf
	{
		test:               familyEquals("URW Chancery L"),
		additionalFamilies: []string{"Z003"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-generics.conf
	{
		test:               familyEquals("Courier"),
		additionalFamilies: []string{"Nimbus Mono", "Nimbus Mono L"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-generics.conf
	{
		test:               familyEquals("Helvetica"),
		additionalFamilies: []string{"Nimbus Sans L"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-generics.conf
	{
		test:               familyEquals("ITC Avant Garde Gothic"),
		additionalFamilies: []string{"URW Gothic L"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-generics.conf
	{
		test:               familyEquals("ITC Bookman"),
		additionalFamilies: []string{"Bookman URW", "URW Bookman L"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-generics.conf
	{
		test:               familyEquals("ITC Zapf Chancery"),
		additionalFamilies: []string{"Chancery URW", "URW Chancery L"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-generics.conf
	{
		test:               familyEquals("ITC Zapf Dingbats"),
		additionalFamilies: []string{"Dingbats"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-generics.conf
	{
		test:               familyEquals("New Century Schoolbook"),
		additionalFamilies: []string{"Century Schoolbook L", "Century SchoolBook URW"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-generics.conf
	{
		test:               familyEquals("Palatino"),
		additionalFamilies: []string{"Palladio URW", "URW Palladio L"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-generics.conf
	{
		test:               familyEquals("Symbol"),
		additionalFamilies: []string{"Standard Symbols L"},
		op:                 opAppend,
	},
	// confs/61-urw-fallback-generics.conf
	{
		test:               familyEquals("Times"),
		additionalFamilies: []string{"Nimbus Roman No9 L"},
		op:                 opAppend,
	},
	// confs/61-urw-gothic.conf
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"URW Gothic"},
		op:                 opPrepend,
	},
	// confs/61-urw-gothic.conf
	{
		test:               familyEquals("URW Gothic"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/61-urw-gothic.conf
	{
		test:               familyEquals("URW Gothic"),
		additionalFamilies: []string{"ITC Avant Garde Gothic"},
		op:                 opAppendLast,
	},
	// confs/61-urw-gothic.conf
	{
		test:               familyEquals("ITC Avant Garde Gothic"),
		additionalFamilies: []string{"URW Gothic"},
		op:                 opAppend,
	},
	// confs/61-urw-gothic.conf
	{
		test:               familyEquals("TeX Gyre Adventor"),
		additionalFamilies: []string{"URW Gothic"},
		op:                 opAppend,
	},
	// confs/61-urw-nimbus-mono-ps.conf
	{
		test:               familyEquals("monospace"),
		additionalFamilies: []string{"Nimbus Mono PS"},
		op:                 opPrepend,
	},
	// confs/61-urw-nimbus-mono-ps.conf
	{
		test:               familyEquals("Nimbus Mono PS"),
		additionalFamilies: []string{"monospace"},
		op:                 opAppendLast,
	},
	// confs/61-urw-nimbus-mono-ps.conf
	{
		test:               familyEquals("Nimbus Mono PS"),
		additionalFamilies: []string{"Courier"},
		op:                 opAppendLast,
	},
	// confs/61-urw-nimbus-mono-ps.conf
	{
		test:               familyEquals("Courier"),
		additionalFamilies: []string{"Nimbus Mono PS"},
		op:                 opAppend,
	},
	// confs/61-urw-nimbus-mono-ps.conf
	{
		test:               familyEquals("TeX Gyre Cursor"),
		additionalFamilies: []string{"Nimbus Mono PS"},
		op:                 opAppend,
	},
	// confs/61-urw-nimbus-roman.conf
	{
		test:               familyEquals("serif"),
		additionalFamilies: []string{"Nimbus Roman"},
		op:                 opPrepend,
	},
	// confs/61-urw-nimbus-roman.conf
	{
		test:               familyEquals("Nimbus Roman"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/61-urw-nimbus-roman.conf
	{
		test:               familyEquals("Nimbus Roman"),
		additionalFamilies: []string{"Times"},
		op:                 opAppendLast,
	},
	// confs/61-urw-nimbus-roman.conf
	{
		test:               familyEquals("Times"),
		additionalFamilies: []string{"Nimbus Roman"},
		op:                 opAppend,
	},
	// confs/61-urw-nimbus-roman.conf
	{
		test:               familyEquals("TeX Gyre Termes"),
		additionalFamilies: []string{"Nimbus Roman"},
		op:                 opAppend,
	},
	// confs/61-urw-nimbus-sans.conf
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"Nimbus Sans"},
		op:                 opPrepend,
	},
	// confs/61-urw-nimbus-sans.conf
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"Nimbus Sans Narrow"},
		op:                 opPrepend,
	},
	// confs/61-urw-nimbus-sans.conf
	{
		test:               familyEquals("Nimbus Sans"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/61-urw-nimbus-sans.conf
	{
		test:               familyEquals("Nimbus Sans Narrow"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/61-urw-nimbus-sans.conf
	{
		test:               familyEquals("Nimbus Sans"),
		additionalFamilies: []string{"Helvetica"},
		op:                 opAppendLast,
	},
	// confs/61-urw-nimbus-sans.conf
	{
		test:               familyEquals("Nimbus Sans Narrow"),
		additionalFamilies: []string{"Helvetica Narrow"},
		op:                 opAppendLast,
	},
	// confs/61-urw-nimbus-sans.conf
	{
		test:               familyEquals("Helvetica"),
		additionalFamilies: []string{"Nimbus Sans"},
		op:                 opAppend,
	},
	// confs/61-urw-nimbus-sans.conf
	{
		test:               familyEquals("Helvetica Narrow"),
		additionalFamilies: []string{"Nimbus Sans Narrow"},
		op:                 opAppend,
	},
	// confs/61-urw-nimbus-sans.conf
	{
		test:               familyEquals("TeX Gyre Heros"),
		additionalFamilies: []string{"Nimbus Sans"},
		op:                 opAppend,
	},
	// confs/61-urw-nimbus-sans.conf
	{
		test:               familyEquals("TeX Gyre Heros Cn"),
		additionalFamilies: []string{"Nimbus Sans Narrow"},
		op:                 opAppend,
	},
	// confs/61-urw-p052.conf
	{
		test:               familyEquals("serif"),
		additionalFamilies: []string{"P052"},
		op:                 opPrepend,
	},
	// confs/61-urw-p052.conf
	{
		test:               familyEquals("P052"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/61-urw-p052.conf
	{
		test:               familyEquals("P052"),
		additionalFamilies: []string{"Palatino"},
		op:                 opAppendLast,
	},
	// confs/61-urw-p052.conf
	{
		test:               familyEquals("Palatino"),
		additionalFamilies: []string{"P052"},
		op:                 opAppend,
	},
	// confs/61-urw-p052.conf
	{
		test:               familyEquals("Palatino Linotype"),
		additionalFamilies: []string{"P052"},
		op:                 opAppend,
	},
	// confs/61-urw-p052.conf
	{
		test:               familyEquals("Tex Gyre Pagella"),
		additionalFamilies: []string{"P052"},
		op:                 opAppend,
	},
	// confs/61-urw-standard-symbols-ps.conf
	{
		test:               familyEquals("serif"),
		additionalFamilies: []string{"Standard Symbols PS"},
		op:                 opPrepend,
	},
	// confs/61-urw-standard-symbols-ps.conf
	{
		test:               familyEquals("Standard Symbols PS"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/61-urw-standard-symbols-ps.conf
	{
		test:               familyEquals("Standard Symbols PS"),
		additionalFamilies: []string{"Symbol"},
		op:                 opAppendLast,
	},
	// confs/61-urw-standard-symbols-ps.conf
	{
		test:               familyEquals("Symbol"),
		additionalFamilies: []string{"Standard Symbols PS"},
		op:                 opAppend,
	},
	// confs/61-urw-standard-symbols-ps.conf
	{
		test:               familyEquals("SymbolNeu"),
		additionalFamilies: []string{"Standard Symbols PS"},
		op:                 opAppend,
	},
	// confs/61-urw-standard-symbols-ps.conf
	{
		test:               familyEquals("Symbol Neu for Powerline"),
		additionalFamilies: []string{"Standard Symbols PS"},
		op:                 opAppend,
	},
	// confs/61-urw-z003.conf
	{
		test:               familyEquals("cursive"),
		additionalFamilies: []string{"Z003"},
		op:                 opPrepend,
	},
	// confs/61-urw-z003.conf
	{
		test:               familyEquals("Z003"),
		additionalFamilies: []string{"cursive"},
		op:                 opAppendLast,
	},
	// confs/61-urw-z003.conf
	{
		test:               familyEquals("Z003"),
		additionalFamilies: []string{"ITC Zapf Chancery"},
		op:                 opAppendLast,
	},
	// confs/61-urw-z003.conf
	{
		test:               familyEquals("ITC Zapf Chancery"),
		additionalFamilies: []string{"Z003"},
		op:                 opAppend,
	},
	// confs/61-urw-z003.conf
	{
		test:               familyEquals("TeX Gyre Chorus"),
		additionalFamilies: []string{"Z003"},
		op:                 opAppend,
	},
	// confs/64-01-tlwg-kinnari.conf
	{
		test:               familyEquals("serif"),
		additionalFamilies: []string{"Kinnari"},
		op:                 opPrepend,
	},
	// confs/64-02-tlwg-norasi.conf
	{
		test:               familyEquals("serif"),
		additionalFamilies: []string{"Norasi"},
		op:                 opPrepend,
	},
	// confs/64-10-tlwg-loma.conf
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"Loma"},
		op:                 opPrepend,
	},
	// confs/64-11-tlwg-waree.conf
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"Waree"},
		op:                 opPrepend,
	},
	// confs/64-13-tlwg-garuda.conf
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"Garuda"},
		op:                 opPrepend,
	},
	// confs/64-14-tlwg-umpush.conf
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"Umpush"},
		op:                 opPrepend,
	},
	// confs/64-15-laksaman.conf
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"Laksaman"},
		op:                 opPrepend,
	},
	// confs/64-21-tlwg-typo.conf
	{
		test:               familyEquals("monospace"),
		additionalFamilies: []string{"TlwgTypo"},
		op:                 opPrepend,
	},
	// confs/64-22-tlwg-typist.conf
	{
		test:               familyEquals("monospace"),
		additionalFamilies: []string{"TlwgTypist"},
		op:                 opPrepend,
	},
	// confs/64-23-tlwg-mono.conf
	{
		test:               familyEquals("monospace"),
		additionalFamilies: []string{"TlwgMono"},
		op:                 opPrepend,
	},
	// confs/64-language-selector-prefer.conf
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"Noto Sans CJK JP", "Noto Sans CJK KR", "Noto Sans CJK SC", "Noto Sans CJK TC", "Noto Sans CJK HK", "Lohit Devanagari"},
		op:                 opPrepend,
	},
	// confs/64-language-selector-prefer.conf
	{
		test:               familyEquals("serif"),
		additionalFamilies: []string{"Noto Serif CJK JP", "Noto Serif CJK KR", "Noto Serif CJK SC", "Noto Serif CJK TC", "Lohit Devanagari"},
		op:                 opPrepend,
	},
	// confs/64-language-selector-prefer.conf
	{
		test:               familyEquals("monospace"),
		additionalFamilies: []string{"Noto Sans Mono CJK JP", "Noto Sans Mono CJK KR", "Noto Sans Mono CJK SC", "Noto Sans Mono CJK TC", "Noto Sans Mono CJK HK"},
		op:                 opPrepend,
	},
	// confs/65-0-fonts-beng-extra.conf
	{
		test:               langContainsAndFamilyEquals{lang: "bn", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Bengali"},
		op:                 opAppend,
	},
	// confs/65-0-fonts-beng-extra.conf
	{
		test:               langContainsAndFamilyEquals{lang: "bn", family: "serif"},
		additionalFamilies: []string{"MuktiNarrow"},
		op:                 opAppend,
	},
	// confs/65-0-fonts-beng-extra.conf
	{
		test:               langContainsAndFamilyEquals{lang: "as", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Assamese", "Lohit Bengali"},
		op:                 opAppend,
	},
	// confs/65-0-fonts-guru-extra.conf
	{
		test:               langContainsAndFamilyEquals{lang: "pa", family: "sans-serif"},
		additionalFamilies: []string{"Saab"},
		op:                 opAppend,
	},
	// confs/65-0-fonts-guru-extra.conf
	{
		test:               langContainsAndFamilyEquals{lang: "pa", family: "serif"},
		additionalFamilies: []string{"Lohit Punjabi"},
		op:                 opAppend,
	},
	// confs/65-0-fonts-orya-extra.conf
	{
		test:               langContainsAndFamilyEquals{lang: "or", family: "sans-serif"},
		additionalFamilies: []string{"utkal"},
		op:                 opAppend,
	},
	// confs/65-0-fonts-orya-extra.conf
	{
		test:               langContainsAndFamilyEquals{lang: "or", family: "serif"},
		additionalFamilies: []string{"utkal"},
		op:                 opAppend,
	},
	// confs/65-0-fonts-telu-extra.conf
	{
		test:               langContainsAndFamilyEquals{lang: "te", family: "sans-serif"},
		additionalFamilies: []string{"lohit_te"},
		op:                 opAppend,
	},
	// confs/65-0-fonts-telu-extra.conf
	{
		test:               langContainsAndFamilyEquals{lang: "te", family: "serif"},
		additionalFamilies: []string{"Vemana"},
		op:                 opAppend,
	},
	// confs/65-0-smc-meera.conf
	{
		test:               langContainsAndFamilyEquals{lang: "ml", family: "sans-serif"},
		additionalFamilies: []string{"Meera"},
		op:                 opPrepend,
	},
	// confs/65-0-smc-meera.conf
	{
		test:               familyEquals("Meera"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/65-0-smc-rachana.conf
	{
		test:               langContainsAndFamilyEquals{lang: "ml", family: "serif"},
		additionalFamilies: []string{"Rachana"},
		op:                 opPrepend,
	},
	// confs/65-0-smc-rachana.conf
	{
		test:               familyEquals("Rachana"),
		additionalFamilies: []string{"serif"},
		op:                 opAppendLast,
	},
	// confs/65-droid-sans-fallback.conf
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"Droid Sans Fallback"},
		op:                 opPrepend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Nesf"),
		additionalFamilies: []string{"Nesf2"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Nesf2"),
		additionalFamilies: []string{"Persian_sansserif_default"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Nazanin"),
		additionalFamilies: []string{"Nazli"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Lotus"),
		additionalFamilies: []string{"Lotoos"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Yaqut"),
		additionalFamilies: []string{"Yaghoot"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Yaghut"),
		additionalFamilies: []string{"Yaghoot"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Traffic"),
		additionalFamilies: []string{"Terafik"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Ferdowsi"),
		additionalFamilies: []string{"Ferdosi"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Fantezy"),
		additionalFamilies: []string{"Fantezi"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Jadid"),
		additionalFamilies: []string{"Persian_title"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Titr"),
		additionalFamilies: []string{"Persian_title"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Kamran"),
		additionalFamilies: []string{"Persian_fantasy", "Homa"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Homa"),
		additionalFamilies: []string{"Persian_fantasy", "Kamran"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Fantezi"),
		additionalFamilies: []string{"Persian_fantasy"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Tabassom"),
		additionalFamilies: []string{"Persian_fantasy"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Arshia"),
		additionalFamilies: []string{"Persian_square"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Nasim"),
		additionalFamilies: []string{"Persian_square"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Elham"),
		additionalFamilies: []string{"Persian_square", "Farnaz"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Farnaz"),
		additionalFamilies: []string{"Persian_square", "Elham"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Sina"),
		additionalFamilies: []string{"Persian_square"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Persian_title"),
		additionalFamilies: []string{"Titr", "Jadid", "Persian_serif"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Persian_fantasy"),
		additionalFamilies: []string{"Homa", "Kamran", "Fantezi", "Tabassom", "Persian_square"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Persian_square"),
		additionalFamilies: []string{"Arshia", "Elham", "Farnaz", "Nasim", "Sina", "Persian_serif"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("serif"),
		additionalFamilies: []string{"Nazli", "Lotoos", "Mitra", "Ferdosi", "Badr", "Zar"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"Roya", "Koodak", "Terafik"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("monospace"),
		additionalFamilies: []string{"Terafik"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("fantasy"),
		additionalFamilies: []string{"Homa", "Kamran", "Fantezi", "Tabassom"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("cursive"),
		additionalFamilies: []string{"IranNastaliq", "Nafees Nastaleeq"},
		op:                 opAppend,
	},
	// confs/65-fonts-persian.conf
	{
		test:               familyEquals("Persian_sansserif_default"),
		additionalFamilies: []string{"Roya"},
		op:                 opReplace,
	},
	// confs/65-fonts-takao-pgothic.conf
	{
		test:               familyEquals("TakaoPGothic"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/65-fonts-takao-pgothic.conf
	{
		test:               langContainsAndFamilyEquals{lang: "ja", family: "sans-serif"},
		additionalFamilies: []string{"TakaoPGothic"},
		op:                 opPrepend,
	},
	// confs/65-fonts-takao-pgothic.conf
	{
		test:               familyEquals("GothicBBB"),
		additionalFamilies: []string{"TakaoPGothic"},
		op:                 opPrepend,
	},
	// confs/65-khmer.conf
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"Khmer OS"},
		op:                 opPrepend,
	},
	// confs/65-khmer.conf
	{
		test:               familyEquals("serif"),
		additionalFamilies: []string{"Khmer OS"},
		op:                 opPrepend,
	},
	// confs/65-khmer.conf
	{
		test:               familyEquals("monospace"),
		additionalFamilies: []string{"Khmer OS System"},
		op:                 opPrepend,
	},
	// confs/65-nonlatin.conf (Set preferable fonts for non-Latin)
	{
		test:               familyEquals("serif"),
		additionalFamilies: []string{"Artsounk", "BPG UTF8 M", "Kinnari", "Norasi", "Frank Ruehl", "Dror", "JG LaoTimes", "Saysettha Unicode", "Pigiarniq", "B Davat", "B Compset", "Kacst-Qr", "Urdu Nastaliq Unicode", "Raghindi", "Mukti Narrow", "padmaa", "Hapax Berbère", "MS Mincho", "SimSun", "PMingLiu", "WenQuanYi Zen Hei", "WenQuanYi Bitmap Song", "AR PL ShanHeiSun Uni", "AR PL New Sung", "ZYSong18030", "HanyiSong", "MgOpen Canonica", "Sazanami Mincho", "IPAMonaMincho", "IPAMincho", "Kochi Mincho", "AR PL SungtiL GB", "AR PL Mingti2L Big5", "AR PL Zenkai Uni", "ＭＳ 明朝", "ZYSong18030", "NanumMyeongjo", "UnBatang", "Baekmuk Batang", "KacstQura", "Frank Ruehl CLM", "Lohit Bengali", "Lohit Gujarati", "Lohit Hindi", "Lohit Marathi", "Lohit Maithili", "Lohit Kashmiri", "Lohit Konkani", "Lohit Nepali", "Lohit Sindhi", "Lohit Punjabi", "Lohit Tamil", "Rachana", "Lohit Malayalam", "Lohit Kannada", "Lohit Telugu", "Lohit Oriya", "LKLUG"},
		op:                 opPrepend,
	},
	// confs/65-nonlatin.conf (Set preferable fonts for non-Latin)
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"Nachlieli", "Lucida Sans Unicode", "Yudit Unicode", "Kerkis", "ArmNet Helvetica", "Artsounk", "BPG UTF8 M", "Waree", "Loma", "Garuda", "Umpush", "Saysettha Unicode", "JG Lao Old Arial", "GF Zemen Unicode", "Pigiarniq", "B Davat", "B Compset", "Kacst-Qr", "Urdu Nastaliq Unicode", "Raghindi", "Mukti Narrow", "padmaa", "Hapax Berbère", "MS Gothic", "UmePlus P Gothic", "Microsoft YaHei", "Microsoft JhengHei", "WenQuanYi Zen Hei", "WenQuanYi Bitmap Song", "AR PL ShanHeiSun Uni", "AR PL New Sung", "MgOpen Moderna", "MgOpen Modata", "MgOpen Cosmetica", "VL Gothic", "IPAMonaGothic", "IPAGothic", "Sazanami Gothic", "Kochi Gothic", "AR PL KaitiM GB", "AR PL KaitiM Big5", "AR PL ShanHeiSun Uni", "AR PL SungtiL GB", "AR PL Mingti2L Big5", "ＭＳ ゴシック", "ZYSong18030", "NanumGothic", "UnDotum", "Baekmuk Dotum", "Baekmuk Gulim", "KacstQura", "Lohit Bengali", "Lohit Gujarati", "Lohit Hindi", "Lohit Marathi", "Lohit Maithili", "Lohit Kashmiri", "Lohit Konkani", "Lohit Nepali", "Lohit Sindhi", "Lohit Punjabi", "Lohit Tamil", "Meera", "Lohit Malayalam", "Lohit Kannada", "Lohit Telugu", "Lohit Oriya", "LKLUG"},
		op:                 opPrepend,
	},
	// confs/65-nonlatin.conf (Set preferable fonts for non-Latin)
	{
		test:               familyEquals("monospace"),
		additionalFamilies: []string{"Miriam Mono", "VL Gothic", "IPAMonaGothic", "IPAGothic", "Sazanami Gothic", "Kochi Gothic", "AR PL KaitiM GB", "MS Gothic", "UmePlus Gothic", "NSimSun", "MingLiu", "AR PL ShanHeiSun Uni", "AR PL New Sung Mono", "HanyiSong", "AR PL SungtiL GB", "AR PL Mingti2L Big5", "ZYSong18030", "NanumGothicCoding", "NanumGothic", "UnDotum", "Baekmuk Dotum", "Baekmuk Gulim", "TlwgTypo", "TlwgTypist", "TlwgTypewriter", "TlwgMono", "Hasida", "Mitra Mono", "GF Zemen Unicode", "Hapax Berbère", "Lohit Bengali", "Lohit Gujarati", "Lohit Hindi", "Lohit Marathi", "Lohit Maithili", "Lohit Kashmiri", "Lohit Konkani", "Lohit Nepali", "Lohit Sindhi", "Lohit Punjabi", "Lohit Tamil", "Meera", "Lohit Malayalam", "Lohit Kannada", "Lohit Telugu", "Lohit Oriya", "LKLUG"},
		op:                 opPrepend,
	},
	// confs/66-lohit-assamese.conf
	{
		test:               langContainsAndFamilyEquals{lang: "as", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Assamese"},
		op:                 opPrepend,
	},
	// confs/66-lohit-assamese.conf
	{
		test:               familyEquals("Lohit Assamese"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/66-lohit-bengali.conf
	{
		test:               langContainsAndFamilyEquals{lang: "bn", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Bengali"},
		op:                 opPrepend,
	},
	// confs/66-lohit-bengali.conf
	{
		test:               familyEquals("Lohit Bengali"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/66-lohit-devanagari.conf
	{
		test:               langContainsAndFamilyEquals{lang: "hi", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Devanagari"},
		op:                 opPrepend,
	},
	// confs/66-lohit-devanagari.conf
	{
		test:               langContainsAndFamilyEquals{lang: "mr", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Devanagari"},
		op:                 opPrepend,
	},
	// confs/66-lohit-devanagari.conf
	{
		test:               langContainsAndFamilyEquals{lang: "kok", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Devanagari"},
		op:                 opPrepend,
	},
	// confs/66-lohit-devanagari.conf
	{
		test:               langContainsAndFamilyEquals{lang: "ks-devanagari", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Devanagari"},
		op:                 opPrepend,
	},
	// confs/66-lohit-devanagari.conf
	{
		test:               langContainsAndFamilyEquals{lang: "sd-devanagari", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Devanagari"},
		op:                 opPrepend,
	},
	// confs/66-lohit-devanagari.conf
	{
		test:               langContainsAndFamilyEquals{lang: "mai", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Devanagari"},
		op:                 opPrepend,
	},
	// confs/66-lohit-devanagari.conf
	{
		test:               langContainsAndFamilyEquals{lang: "ne", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Devanagari"},
		op:                 opPrepend,
	},
	// confs/66-lohit-devanagari.conf
	{
		test:               langContainsAndFamilyEquals{lang: "brx", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Devanagari"},
		op:                 opPrepend,
	},
	// confs/66-lohit-devanagari.conf
	{
		test:               langContainsAndFamilyEquals{lang: "doi", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Devanagari"},
		op:                 opPrepend,
	},
	// confs/66-lohit-devanagari.conf
	{
		test:               langContainsAndFamilyEquals{lang: "sa", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Devanagari"},
		op:                 opPrepend,
	},
	// confs/66-lohit-devanagari.conf
	{
		test:               langContainsAndFamilyEquals{lang: "sat", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Devanagari"},
		op:                 opPrepend,
	},
	// confs/66-lohit-devanagari.conf
	{
		test:               familyEquals("Lohit Devanagari"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/66-lohit-gujarati.conf
	{
		test:               langContainsAndFamilyEquals{lang: "gu", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Gujarati"},
		op:                 opPrepend,
	},
	// confs/66-lohit-gujarati.conf
	{
		test:               familyEquals("Lohit Gujarati"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/66-lohit-gurmukhi.conf
	{
		test:               langContainsAndFamilyEquals{lang: "pa", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Gurmukhi"},
		op:                 opPrepend,
	},
	// confs/66-lohit-gurmukhi.conf
	{
		test:               familyEquals("Lohit Gurmukhi"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/66-lohit-kannada.conf
	{
		test:               langContainsAndFamilyEquals{lang: "kn", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Kannada"},
		op:                 opPrepend,
	},
	// confs/66-lohit-kannada.conf
	{
		test:               familyEquals("Lohit Kannada"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/66-lohit-odia.conf
	{
		test:               langContainsAndFamilyEquals{lang: "or", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Odia"},
		op:                 opPrepend,
	},
	// confs/66-lohit-odia.conf
	{
		test:               familyEquals("Lohit Odia"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/66-lohit-tamil-classical.conf
	{
		test:               langContainsAndFamilyEquals{lang: "ta", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Tamil Classical"},
		op:                 opPrepend,
	},
	// confs/66-lohit-tamil-classical.conf
	{
		test:               familyEquals("Lohit Tamil Classical"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/66-lohit-tamil.conf
	{
		test:               langContainsAndFamilyEquals{lang: "ta", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Tamil"},
		op:                 opPrepend,
	},
	// confs/66-lohit-tamil.conf
	{
		test:               familyEquals("Lohit Tamil"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/66-lohit-telugu.conf
	{
		test:               langContainsAndFamilyEquals{lang: "te", family: "sans-serif"},
		additionalFamilies: []string{"Lohit Telugu"},
		op:                 opPrepend,
	},
	// confs/66-lohit-telugu.conf
	{
		test:               familyEquals("Lohit Telugu"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/67-fonts-smc-manjari.conf
	{
		test:               langContainsAndFamilyEquals{lang: "ml", family: "sans-serif"},
		additionalFamilies: []string{"Manjari"},
		op:                 opPrepend,
	},
	// confs/67-fonts-smc-manjari.conf
	{
		test:               familyEquals("Manjari"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/67-smc-anjalioldlipi.conf
	{
		test:               langAndFamilyEqual{lang: "ml-in", family: "sans-serif"},
		additionalFamilies: []string{"AnjaliOldLipi"},
		op:                 opPrepend,
	},
	// confs/67-smc-anjalioldlipi.conf
	{
		test:               familyEquals("AnjaliOldLipi"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/67-smc-chilanka.conf
	{
		test:               langAndFamilyEqual{lang: "ml-in", family: "cursive"},
		additionalFamilies: []string{"Chilanka"},
		op:                 opPrepend,
	},
	// confs/67-smc-chilanka.conf
	{
		test:               familyEquals("Chilanka"),
		additionalFamilies: []string{"cursive"},
		op:                 opAppendLast,
	},
	// confs/67-smc-dyuthi.conf
	{
		test:               langAndFamilyEqual{lang: "ml-in", family: "sans-serif"},
		additionalFamilies: []string{"Dyuthi"},
		op:                 opPrepend,
	},
	// confs/67-smc-dyuthi.conf
	{
		test:               familyEquals("Dyuthi"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/67-smc-karumbi.conf
	{
		test:               langAndFamilyEqual{lang: "ml-in", family: "cursive"},
		additionalFamilies: []string{"Karumbi"},
		op:                 opPrepend,
	},
	// confs/67-smc-karumbi.conf
	{
		test:               familyEquals("Karumbi"),
		additionalFamilies: []string{"cursive"},
		op:                 opAppendLast,
	},
	// confs/67-smc-keraleeyam.conf
	{
		test:               langAndFamilyEqual{lang: "ml-in", family: "sans-serif"},
		additionalFamilies: []string{"Keraleeyam"},
		op:                 opPrepend,
	},
	// confs/67-smc-keraleeyam.conf
	{
		test:               familyEquals("Keraleeyam"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/67-smc-raghumalayalamsans.conf
	{
		test:               langAndFamilyEqual{lang: "ml-in", family: "sans-serif"},
		additionalFamilies: []string{"RaghuMalayalam"},
		op:                 opPrepend,
	},
	// confs/67-smc-raghumalayalamsans.conf
	{
		test:               familyEquals("RaghuMalayalam"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/67-smc-suruma.conf
	{
		test:               langAndFamilyEqual{lang: "ml-in", family: "sans-serif"},
		additionalFamilies: []string{"suruma"},
		op:                 opPrepend,
	},
	// confs/67-smc-suruma.conf
	{
		test:               familyEquals("suruma"),
		additionalFamilies: []string{"sans-serif"},
		op:                 opAppendLast,
	},
	// confs/67-smc-uroob.conf
	{
		test:               langAndFamilyEqual{lang: "ml-in", family: "fantasy"},
		additionalFamilies: []string{"Uroob"},
		op:                 opPrepend,
	},
	// confs/67-smc-uroob.conf
	{
		test:               familyEquals("Uroob"),
		additionalFamilies: []string{"fantasy"},
		op:                 opAppendLast,
	},
	// confs/69-language-selector-zh-cn.conf
	{
		test:               langAndFamilyEqual{lang: "zh-cn", family: "serif"},
		additionalFamilies: []string{"Noto Serif CJK SC", "HYSong", "AR PL UMing CN", "AR PL UMing HK", "AR PL New Sung", "WenQuanYi Bitmap Song", "AR PL UKai CN", "AR PL ZenKai Uni"},
		op:                 opPrepend,
	},
	// confs/69-language-selector-zh-cn.conf
	{
		test:               langAndFamilyEqual{lang: "zh-cn", family: "sans-serif"},
		additionalFamilies: []string{"Noto Sans CJK SC", "WenQuanYi Zen Hei", "HYSong", "AR PL UMing CN", "AR PL UMing HK", "AR PL New Sung", "AR PL UKai CN", "AR PL ZenKai Uni"},
		op:                 opPrepend,
	},
	// confs/69-language-selector-zh-cn.conf
	{
		test:               langAndFamilyEqual{lang: "zh-cn", family: "monospace"},
		additionalFamilies: []string{"DejaVu Sans Mono", "Noto Sans Mono CJK SC", "WenQuanYi Zen Hei Mono", "HYSong", "AR PL UMing CN", "AR PL UMing HK", "AR PL New Sung", "AR PL UKai CN", "AR PL ZenKai Uni"},
		op:                 opPrepend,
	},
	// confs/69-language-selector-zh-hk.conf
	{
		test:               langAndFamilyEqual{lang: "zh-hk", family: "serif"},
		additionalFamilies: []string{"Noto Serif CJK TC", "AR PL UMing HK", "AR PL New Sung", "HYSong", "WenQuanYi Bitmap Song", "AR PL UKai HK", "AR PL ZenKai Uni"},
		op:                 opPrepend,
	},
	// confs/69-language-selector-zh-hk.conf
	{
		test:               langAndFamilyEqual{lang: "zh-hk", family: "sans-serif"},
		additionalFamilies: []string{"Noto Sans CJK HK", "AR PL UMing HK", "AR PL New Sung", "HYSong", "AR PL UKai HK", "AR PL ZenKai Uni"},
		op:                 opPrepend,
	},
	// confs/69-language-selector-zh-hk.conf
	{
		test:               langAndFamilyEqual{lang: "zh-hk", family: "monospace"},
		additionalFamilies: []string{"DejaVu Sans Mono", "Noto Sans Mono CJK HK", "AR PL UMing HK", "AR PL New Sung", "HYSong", "AR PL UKai HK", "AR PL ZenKai Uni"},
		op:                 opPrepend,
	},
	// confs/69-language-selector-zh-mo.conf
	{
		test:               langAndFamilyEqual{lang: "zh-mo", family: "serif"},
		additionalFamilies: []string{"Noto Serif CJK TC", "AR PL UMing HK", "AR PL New Sung", "HYSong", "WenQuanYi Bitmap Song", "AR PL UKai HK", "AR PL ZenKai Uni"},
		op:                 opPrepend,
	},
	// confs/69-language-selector-zh-mo.conf
	{
		test:               langAndFamilyEqual{lang: "zh-mo", family: "sans-serif"},
		additionalFamilies: []string{"Bitstream Vera Sans", "Noto Sans CJK TC", "AR PL UMing HK", "AR PL New Sung", "HYSong", "AR PL UKai HK", "AR PL ZenKai Uni"},
		op:                 opPrepend,
	},
	// confs/69-language-selector-zh-mo.conf
	{
		test:               langAndFamilyEqual{lang: "zh-mo", family: "monospace"},
		additionalFamilies: []string{"Bitstream Vera Sans Mono", "DejaVu Sans Mono", "Noto Sans Mono CJK TC", "AR PL UMing HK", "AR PL New Sung", "HYSong", "AR PL UKai HK", "AR PL ZenKai Uni"},
		op:                 opPrepend,
	},
	// confs/69-language-selector-zh-sg.conf
	{
		test:               langAndFamilyEqual{lang: "zh-sg", family: "serif"},
		additionalFamilies: []string{"Noto Serif CJK SC", "HYSong", "AR PL UMing CN", "AR PL UMing HK", "AR PL New Sung", "WenQuanYi Bitmap Song", "AR PL UKai CN", "AR PL ZenKai Uni"},
		op:                 opPrepend,
	},
	// confs/69-language-selector-zh-sg.conf
	{
		test:               langAndFamilyEqual{lang: "zh-sg", family: "sans-serif"},
		additionalFamilies: []string{"Noto Sans CJK SC", "WenQuanYi Zen Hei", "HYSong", "AR PL UMing CN", "AR PL UMing HK", "AR PL New Sung", "AR PL UKai CN", "AR PL ZenKai Uni"},
		op:                 opPrepend,
	},
	// confs/69-language-selector-zh-sg.conf
	{
		test:               langAndFamilyEqual{lang: "zh-sg", family: "monospace"},
		additionalFamilies: []string{"DejaVu Sans Mono", "Noto Sans Mono CJK SC", "WenQuanYi Zen Hei Mono", "HYSong", "AR PL UMing CN", "AR PL UMing HK", "AR PL New Sung", "AR PL UKai CN", "AR PL ZenKai Uni"},
		op:                 opPrepend,
	},
	// confs/69-language-selector-zh-tw.conf
	{
		test:               langAndFamilyEqual{lang: "zh-tw", family: "serif"},
		additionalFamilies: []string{"Noto Serif CJK TC", "AR PL UMing TW", "AR PL UMing HK", "AR PL New Sung", "HYSong", "WenQuanYi Bitmap Song", "AR PL UKai TW", "AR PL UKai HK", "AR PL ZenKai Uni", "DejaVu Serif", "Bitstream Vera Serif"},
		op:                 opPrepend,
	},
	// confs/69-language-selector-zh-tw.conf
	{
		test:               langAndFamilyEqual{lang: "zh-tw", family: "sans-serif"},
		additionalFamilies: []string{"Noto Sans CJK TC", "WenQuanYi Zen Hei", "AR PL UMing TW", "AR PL UMing HK", "AR PL New Sung", "HYSong", "AR PL UKai TW", "AR PL UKai HK", "AR PL ZenKai Uni", "DejaVu Sans", "Bitstream Vera Sans"},
		op:                 opPrepend,
	},
	// confs/69-language-selector-zh-tw.conf
	{
		test:               langAndFamilyEqual{lang: "zh-tw", family: "monospace"},
		additionalFamilies: []string{"DejaVu Sans Mono", "Noto Sans Mono CJK TC", "WenQuanYi Zen Hei Mono", "AR PL UMing TW", "AR PL UMing HK", "AR PL New Sung", "HYSong", "AR PL UKai TW", "AR PL UKai HK", "AR PL ZenKai Uni", "DejaVu Sans Mono", "Bitstream Vera Sans Mono"},
		op:                 opPrepend,
	},
	// confs/69-unifont.conf
	{
		test:               familyEquals("serif"),
		additionalFamilies: []string{"FreeSerif", "Code2000", "Code2001"},
		op:                 opPrepend,
	},
	// confs/69-unifont.conf
	{
		test:               familyEquals("sans-serif"),
		additionalFamilies: []string{"FreeSans", "Arial Unicode MS", "Arial Unicode", "Code2000", "Code2001"},
		op:                 opPrepend,
	},
	// confs/69-unifont.conf
	{
		test:               familyEquals("monospace"),
		additionalFamilies: []string{"FreeMono"},
		op:                 opPrepend,
	},
	// confs/70-fonts-noto-cjk.conf
	{
		test:               langAndFamilyEqual{lang: "ja", family: "serif"},
		additionalFamilies: []string{"Noto Serif CJK JP"},
		op:                 opPrepend,
	},
	// confs/70-fonts-noto-cjk.conf
	{
		test:               langAndFamilyEqual{lang: "ko", family: "serif"},
		additionalFamilies: []string{"Noto Serif CJK KR"},
		op:                 opPrepend,
	},
	// confs/70-fonts-noto-cjk.conf
	{
		test:               langAndFamilyEqual{lang: "zh-cn", family: "serif"},
		additionalFamilies: []string{"Noto Serif CJK SC"},
		op:                 opPrepend,
	},
	// confs/70-fonts-noto-cjk.conf
	{
		test:               langAndFamilyEqual{lang: "zh-tw", family: "serif"},
		additionalFamilies: []string{"Noto Serif CJK TC"},
		op:                 opPrepend,
	},
	// confs/70-fonts-noto-cjk.conf
	{
		test:               langAndFamilyEqual{lang: "zh-hk", family: "serif"},
		additionalFamilies: []string{"Noto Serif CJK HK"},
		op:                 opPrepend,
	},
	// confs/70-fonts-noto-cjk.conf
	{
		test:               langAndFamilyEqual{lang: "ja", family: "sans-serif"},
		additionalFamilies: []string{"Noto Sans CJK JP"},
		op:                 opPrepend,
	},
	// confs/70-fonts-noto-cjk.conf
	{
		test:               langAndFamilyEqual{lang: "ko", family: "sans-serif"},
		additionalFamilies: []string{"Noto Sans CJK KR"},
		op:                 opPrepend,
	},
	// confs/70-fonts-noto-cjk.conf
	{
		test:               langAndFamilyEqual{lang: "zh-cn", family: "sans-serif"},
		additionalFamilies: []string{"Noto Sans CJK SC"},
		op:                 opPrepend,
	},
	// confs/70-fonts-noto-cjk.conf
	{
		test:               langAndFamilyEqual{lang: "zh-tw", family: "sans-serif"},
		additionalFamilies: []string{"Noto Sans CJK TC"},
		op:                 opPrepend,
	},
	// confs/70-fonts-noto-cjk.conf
	{
		test:               langAndFamilyEqual{lang: "zh-hk", family: "sans-serif"},
		additionalFamilies: []string{"Noto Sans CJK HK"},
		op:                 opPrepend,
	},
	// confs/70-fonts-noto-cjk.conf
	{
		test:               langAndFamilyEqual{lang: "ja", family: "monospace"},
		additionalFamilies: []string{"Noto Sans Mono CJK JP"},
		op:                 opPrepend,
	},
	// confs/70-fonts-noto-cjk.conf
	{
		test:               langAndFamilyEqual{lang: "ko", family: "monospace"},
		additionalFamilies: []string{"Noto Sans Mono CJK KR"},
		op:                 opPrepend,
	},
	// confs/70-fonts-noto-cjk.conf
	{
		test:               langAndFamilyEqual{lang: "zh-cn", family: "monospace"},
		additionalFamilies: []string{"Noto Sans Mono CJK SC"},
		op:                 opPrepend,
	},
	// confs/70-fonts-noto-cjk.conf
	{
		test:               langAndFamilyEqual{lang: "zh-tw", family: "monospace"},
		additionalFamilies: []string{"Noto Sans Mono CJK TC"},
		op:                 opPrepend,
	},
	// confs/70-fonts-noto-cjk.conf
	{
		test:               langAndFamilyEqual{lang: "zh-hk", family: "monospace"},
		additionalFamilies: []string{"Noto Sans Mono CJK HK"},
		op:                 opPrepend,
	},
	// confs/89-tlwg-garuda-synthetic.conf
	{
		test:               familyContains("Browallia"),
		additionalFamilies: []string{"Garuda"},
		op:                 opAppend,
	},
	// confs/89-tlwg-kinnari-synthetic.conf
	{
		test:               familyContains("Angsana"),
		additionalFamilies: []string{"Kinnari"},
		op:                 opAppend,
	},
	// confs/89-tlwg-laksaman-synthetic.conf
	{
		test:               familyContains("TH Sarabun"),
		additionalFamilies: []string{"Laksaman"},
		op:                 opAppend,
	},
	// confs/89-tlwg-umpush-synthetic.conf
	{
		test:               familyContains("Cordia"),
		additionalFamilies: []string{"Umpush"},
		op:                 opAppend,
	},
	// confs/90-fonts-linux-libertine.conf
	{
		test:               familyEquals("Linux Libertine"),
		additionalFamilies: []string{"Linux Libertine O"},
		op:                 opAppend,
	},
	// confs/90-fonts-linux-libertine.conf
	{
		test:               familyEquals("Linux Biolinum"),
		additionalFamilies: []string{"Linux Biolinum O"},
		op:                 opAppend,
	},
	// confs/90-fonts-nanum.conf
	{
		test:               familyEquals("NanumBarunGothic"),
		additionalFamilies: []string{"DejaVu Sans"},
		op:                 opAppend,
	},
	// confs/90-fonts-nanum.conf
	{
		test:               familyEquals("NanumGothic"),
		additionalFamilies: []string{"DejaVu Sans"},
		op:                 opAppend,
	},
	// confs/90-fonts-nanum.conf
	{
		test:               familyEquals("NanumGothicCoding"),
		additionalFamilies: []string{"NanumGothic", "DejaVu Sans Mono"},
		op:                 opAppend,
	},
	// confs/90-fonts-nanum.conf
	{
		test:               familyEquals("NanumMyeongjo"),
		additionalFamilies: []string{"DejaVu Serif"},
		op:                 opAppend,
	},
	// confs/90-fonts-nanum.conf
	{
		test:               familyEquals("NanumSquare"),
		additionalFamilies: []string{"DejaVu Sans"},
		op:                 opAppend,
	},
}
